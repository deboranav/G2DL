/*
  Código de QuickSort adaptado para a sintaxe da sua linguagem.
*/

function particionar(array, low, high) {
    // elemento mais à direita como pivô
    pivo = array[high];

    // ponteiro para maior elemento
    i = low - 1;

    // Assumindo que 'range(low, high)' seja uma função válida na sua linguagem.
    for (int j : range(low, high)) {
        if (array[j] <= pivo) {
            i += 1;
            temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
    }

    // Troca final para colocar o pivô na posição correta
    temp = array[i + 1];
    array[i + 1] = array[high];
    array[high] = temp;

    return i + 1;
}

function quickSort(array, low, high) {
    if (low < high) {
        pi = particionar(array, low, high);

        // Chamadas recursivas
        quickSort(array, low, pi - 1);
        quickSort(array, pi + 1, high);
    }
}

function main() {
    data = [10, 7, 8, 9, 1, 5];
    size = 6;

    quickSort(data, 0, size - 1);

    printf(data);
}