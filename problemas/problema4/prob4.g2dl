// ------------------------------------------------------------------
// Programa: Resolução do Problema dos Números Racionais
// Versão: Final, com Funções Tipadas, Parâmetros e Tipos Compostos
// ------------------------------------------------------------------

// Definição do tipo de dado.
// A regra 'member_decl' agora espera um tipo para cada membro.
type rational_t {
    float numerador;
    float denominador;
};

// --- Subprogramas com Tipos Explícitos ---

// A) Cria e retorna um rational_t
function rational_t cria_racional(float num, float den) {
    rational_t novo_r;
    if (den == 0) {
        printf("Erro: Denominador não pode ser zero. Retornando 0/1.\n");
        novo_r.numerador = 0;
        novo_r.denominador = 1;
    } else {
        novo_r.numerador = num;
        novo_r.denominador = den;
    }
    return novo_r;
}

// B) Compara dois racionais. Retorna 1.0 (true) ou 0.0 (false).
function float sao_iguais(rational_t r1, rational_t r2) {
    // a/b == c/d  se  a*d == c*b
    if ((r1.numerador * r2.denominador) == (r2.numerador * r1.denominador)) {
        return 1.0;
    }
    return 0.0;
}

// C) Operações Aritméticas
function rational_t soma(rational_t r1, rational_t r2) {
    rational_t res_soma;
    res_soma.numerador = (r1.numerador * r2.denominador) + (r2.numerador * r1.denominador);
    res_soma.denominador = r1.denominador * r2.denominador;
    return res_soma;
}

function rational_t multiplicacao(rational_t r1, rational_t r2) {
    rational_t res_mult;
    res_mult.numerador = r1.numerador * r2.numerador;
    res_mult.denominador = r1.denominador * r2.denominador;
    return res_mult;
}

function rational_t nega(rational_t r) {
    rational_t res_nega;
    res_nega.numerador = -r.numerador;
    res_nega.denominador = r.denominador;
    return res_nega;
}


// --- Programa Principal ---

printf("--- Testando Subprogramas de Racionais com Funções Tipadas ---\n");

// Declaração de variáveis usando os tipos definidos
rational_t r1;
rational_t r2;
rational_t r3;
float sao_diferentes;

printf("\nCriando racionais r1=3/4 e r2=1/2...\n");
r1 = cria_racional(3, 4);
r2 = cria_racional(1, 2);
printf("r1 = %.0f/%.0f\n", r1.numerador, r1.denominador);
printf("r2 = %.0f/%.0f\n", r2.numerador, r2.denominador);

printf("\nTestando igualdade...\n");
sao_diferentes = sao_iguais(r1, r2);
if (sao_diferentes == 1.0) {
    printf("r1 e r2 são iguais.\n");
} else {
    printf("r1 e r2 são diferentes.\n");
}

printf("\nTestando operações...\n");

r3 = soma(r1, r2);
printf("Soma (r1 + r2) = %.0f/%.0f\n", r3.numerador, r3.denominador);

r3 = multiplicacao(r1, r2);
printf("Produto (r1 * r2) = %.0f/%.0f\n", r3.numerador, r3.denominador);

r3 = nega(r1);
printf("Negação (-r1) = %.0f/%.0f\n", r3.numerador, r3.denominador);

printf("\n--- Fim do Programa ---\n");